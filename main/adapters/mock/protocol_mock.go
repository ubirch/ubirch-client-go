// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ubirch/ubirch-client-go/main/adapters/mock (interfaces: ExtendedProtocols)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	httphelper "github.com/ubirch/ubirch-client-go/main/adapters/httphelper"
	ent "github.com/ubirch/ubirch-client-go/main/ent"
	ubirch "github.com/ubirch/ubirch-protocol-go/ubirch/v2"
)

// MockExtendedProtocols is a mock of ExtendedProtocols interface.
type MockExtendedProtocols struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedProtocolsMockRecorder
}

// MockExtendedProtocolsMockRecorder is the mock recorder for MockExtendedProtocols.
type MockExtendedProtocolsMockRecorder struct {
	mock *MockExtendedProtocols
}

// NewMockExtendedProtocols creates a new mock instance.
func NewMockExtendedProtocols(ctrl *gomock.Controller) *MockExtendedProtocols {
	mock := &MockExtendedProtocols{ctrl: ctrl}
	mock.recorder = &MockExtendedProtocolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedProtocols) EXPECT() *MockExtendedProtocolsMockRecorder {
	return m.recorder
}

// CloseTransaction mocks base method.
func (m *MockExtendedProtocols) CloseTransaction(arg0 interface{}, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTransaction indicates an expected call of CloseTransaction.
func (mr *MockExtendedProtocolsMockRecorder) CloseTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTransaction", reflect.TypeOf((*MockExtendedProtocols)(nil).CloseTransaction), arg0, arg1)
}

// DecodePrivateKey mocks base method.
func (m *MockExtendedProtocols) DecodePrivateKey(arg0 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePrivateKey", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodePrivateKey indicates an expected call of DecodePrivateKey.
func (mr *MockExtendedProtocolsMockRecorder) DecodePrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePrivateKey", reflect.TypeOf((*MockExtendedProtocols)(nil).DecodePrivateKey), arg0)
}

// DecodePublicKey mocks base method.
func (m *MockExtendedProtocols) DecodePublicKey(arg0 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePublicKey", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodePublicKey indicates an expected call of DecodePublicKey.
func (mr *MockExtendedProtocolsMockRecorder) DecodePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePublicKey", reflect.TypeOf((*MockExtendedProtocols)(nil).DecodePublicKey), arg0)
}

// EncodePrivateKey mocks base method.
func (m *MockExtendedProtocols) EncodePrivateKey(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePrivateKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePrivateKey indicates an expected call of EncodePrivateKey.
func (mr *MockExtendedProtocolsMockRecorder) EncodePrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePrivateKey", reflect.TypeOf((*MockExtendedProtocols)(nil).EncodePrivateKey), arg0)
}

// EncodePublicKey mocks base method.
func (m *MockExtendedProtocols) EncodePublicKey(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePublicKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePublicKey indicates an expected call of EncodePublicKey.
func (mr *MockExtendedProtocolsMockRecorder) EncodePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePublicKey", reflect.TypeOf((*MockExtendedProtocols)(nil).EncodePublicKey), arg0)
}

// Exists mocks base method.
func (m *MockExtendedProtocols) Exists(arg0 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockExtendedProtocolsMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockExtendedProtocols)(nil).Exists), arg0)
}

// FetchIdentity mocks base method.
func (m *MockExtendedProtocols) FetchIdentity(arg0 interface{}, arg1 uuid.UUID) (*ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIdentity", arg0, arg1)
	ret0, _ := ret[0].(*ent.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchIdentity indicates an expected call of FetchIdentity.
func (mr *MockExtendedProtocolsMockRecorder) FetchIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIdentity", reflect.TypeOf((*MockExtendedProtocols)(nil).FetchIdentity), arg0, arg1)
}

// FetchIdentityWithLock mocks base method.
func (m *MockExtendedProtocols) FetchIdentityWithLock(arg0 context.Context, arg1 uuid.UUID) (interface{}, *ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIdentityWithLock", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*ent.Identity)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchIdentityWithLock indicates an expected call of FetchIdentityWithLock.
func (mr *MockExtendedProtocolsMockRecorder) FetchIdentityWithLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIdentityWithLock", reflect.TypeOf((*MockExtendedProtocols)(nil).FetchIdentityWithLock), arg0, arg1)
}

// GenerateKey mocks base method.
func (m *MockExtendedProtocols) GenerateKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockExtendedProtocolsMockRecorder) GenerateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockExtendedProtocols)(nil).GenerateKey))
}

// GetAuthToken mocks base method.
func (m *MockExtendedProtocols) GetAuthToken(arg0 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockExtendedProtocolsMockRecorder) GetAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockExtendedProtocols)(nil).GetAuthToken), arg0)
}

// GetCSR mocks base method.
func (m *MockExtendedProtocols) GetCSR(arg0 []byte, arg1 uuid.UUID, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSR", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSR indicates an expected call of GetCSR.
func (mr *MockExtendedProtocolsMockRecorder) GetCSR(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSR", reflect.TypeOf((*MockExtendedProtocols)(nil).GetCSR), arg0, arg1, arg2, arg3)
}

// GetPrivateKey mocks base method.
func (m *MockExtendedProtocols) GetPrivateKey(arg0 uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockExtendedProtocolsMockRecorder) GetPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockExtendedProtocols)(nil).GetPrivateKey), arg0)
}

// GetPublicKey mocks base method.
func (m *MockExtendedProtocols) GetPublicKey(arg0 uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockExtendedProtocolsMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockExtendedProtocols)(nil).GetPublicKey), arg0)
}

// GetPublicKeyFromPrivateKey mocks base method.
func (m *MockExtendedProtocols) GetPublicKeyFromPrivateKey(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyFromPrivateKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyFromPrivateKey indicates an expected call of GetPublicKeyFromPrivateKey.
func (mr *MockExtendedProtocolsMockRecorder) GetPublicKeyFromPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyFromPrivateKey", reflect.TypeOf((*MockExtendedProtocols)(nil).GetPublicKeyFromPrivateKey), arg0)
}

// GetSignedKeyRegistration mocks base method.
func (m *MockExtendedProtocols) GetSignedKeyRegistration(arg0 []byte, arg1 uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedKeyRegistration", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedKeyRegistration indicates an expected call of GetSignedKeyRegistration.
func (mr *MockExtendedProtocolsMockRecorder) GetSignedKeyRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedKeyRegistration", reflect.TypeOf((*MockExtendedProtocols)(nil).GetSignedKeyRegistration), arg0, arg1)
}

// HashLength mocks base method.
func (m *MockExtendedProtocols) HashLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// HashLength indicates an expected call of HashLength.
func (mr *MockExtendedProtocolsMockRecorder) HashLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashLength", reflect.TypeOf((*MockExtendedProtocols)(nil).HashLength))
}

// IsKeyRegistered mocks base method.
func (m *MockExtendedProtocols) IsKeyRegistered(arg0 uuid.UUID, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyRegistered", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKeyRegistered indicates an expected call of IsKeyRegistered.
func (mr *MockExtendedProtocolsMockRecorder) IsKeyRegistered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyRegistered", reflect.TypeOf((*MockExtendedProtocols)(nil).IsKeyRegistered), arg0, arg1)
}

// Post mocks base method.
func (m *MockExtendedProtocols) Post(arg0 string, arg1 []byte, arg2 map[string]string) (httphelper.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(httphelper.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockExtendedProtocolsMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockExtendedProtocols)(nil).Post), arg0, arg1, arg2)
}

// PrivateKeyBytesToPEM mocks base method.
func (m *MockExtendedProtocols) PrivateKeyBytesToPEM(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKeyBytesToPEM", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateKeyBytesToPEM indicates an expected call of PrivateKeyBytesToPEM.
func (mr *MockExtendedProtocolsMockRecorder) PrivateKeyBytesToPEM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKeyBytesToPEM", reflect.TypeOf((*MockExtendedProtocols)(nil).PrivateKeyBytesToPEM), arg0)
}

// PublicKeyBytesToPEM mocks base method.
func (m *MockExtendedProtocols) PublicKeyBytesToPEM(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyBytesToPEM", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeyBytesToPEM indicates an expected call of PublicKeyBytesToPEM.
func (mr *MockExtendedProtocolsMockRecorder) PublicKeyBytesToPEM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyBytesToPEM", reflect.TypeOf((*MockExtendedProtocols)(nil).PublicKeyBytesToPEM), arg0)
}

// PublicKeyPEMToBytes mocks base method.
func (m *MockExtendedProtocols) PublicKeyPEMToBytes(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyPEMToBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeyPEMToBytes indicates an expected call of PublicKeyPEMToBytes.
func (mr *MockExtendedProtocolsMockRecorder) PublicKeyPEMToBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyPEMToBytes", reflect.TypeOf((*MockExtendedProtocols)(nil).PublicKeyPEMToBytes), arg0)
}

// RequestPublicKeys mocks base method.
func (m *MockExtendedProtocols) RequestPublicKeys(arg0 uuid.UUID) ([]ubirch.SignedKeyRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublicKeys", arg0)
	ret0, _ := ret[0].([]ubirch.SignedKeyRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPublicKeys indicates an expected call of RequestPublicKeys.
func (mr *MockExtendedProtocolsMockRecorder) RequestPublicKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublicKeys", reflect.TypeOf((*MockExtendedProtocols)(nil).RequestPublicKeys), arg0)
}

// SendToAuthService mocks base method.
func (m *MockExtendedProtocols) SendToAuthService(arg0 uuid.UUID, arg1 string, arg2 []byte) (httphelper.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAuthService", arg0, arg1, arg2)
	ret0, _ := ret[0].(httphelper.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToAuthService indicates an expected call of SendToAuthService.
func (mr *MockExtendedProtocolsMockRecorder) SendToAuthService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAuthService", reflect.TypeOf((*MockExtendedProtocols)(nil).SendToAuthService), arg0, arg1, arg2)
}

// SetSignature mocks base method.
func (m *MockExtendedProtocols) SetSignature(arg0 interface{}, arg1 uuid.UUID, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSignature", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSignature indicates an expected call of SetSignature.
func (mr *MockExtendedProtocolsMockRecorder) SetSignature(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignature", reflect.TypeOf((*MockExtendedProtocols)(nil).SetSignature), arg0, arg1, arg2)
}

// Sign mocks base method.
func (m *MockExtendedProtocols) Sign(arg0, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockExtendedProtocolsMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockExtendedProtocols)(nil).Sign), arg0, arg1)
}

// SignHash mocks base method.
func (m *MockExtendedProtocols) SignHash(arg0, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignHash", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHash indicates an expected call of SignHash.
func (mr *MockExtendedProtocolsMockRecorder) SignHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHash", reflect.TypeOf((*MockExtendedProtocols)(nil).SignHash), arg0, arg1)
}

// SignatureLength mocks base method.
func (m *MockExtendedProtocols) SignatureLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignatureLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// SignatureLength indicates an expected call of SignatureLength.
func (mr *MockExtendedProtocolsMockRecorder) SignatureLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignatureLength", reflect.TypeOf((*MockExtendedProtocols)(nil).SignatureLength))
}

// StartTransaction mocks base method.
func (m *MockExtendedProtocols) StartTransaction(arg0 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockExtendedProtocolsMockRecorder) StartTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockExtendedProtocols)(nil).StartTransaction), arg0)
}

// StartTransactionWithLock mocks base method.
func (m *MockExtendedProtocols) StartTransactionWithLock(arg0 context.Context, arg1 uuid.UUID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransactionWithLock", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransactionWithLock indicates an expected call of StartTransactionWithLock.
func (mr *MockExtendedProtocolsMockRecorder) StartTransactionWithLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransactionWithLock", reflect.TypeOf((*MockExtendedProtocols)(nil).StartTransactionWithLock), arg0, arg1)
}

// StoreNewIdentity mocks base method.
func (m *MockExtendedProtocols) StoreNewIdentity(arg0 interface{}, arg1 *ent.Identity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewIdentity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewIdentity indicates an expected call of StoreNewIdentity.
func (mr *MockExtendedProtocolsMockRecorder) StoreNewIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewIdentity", reflect.TypeOf((*MockExtendedProtocols)(nil).StoreNewIdentity), arg0, arg1)
}

// SubmitCSR mocks base method.
func (m *MockExtendedProtocols) SubmitCSR(arg0 uuid.UUID, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCSR", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitCSR indicates an expected call of SubmitCSR.
func (mr *MockExtendedProtocolsMockRecorder) SubmitCSR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCSR", reflect.TypeOf((*MockExtendedProtocols)(nil).SubmitCSR), arg0, arg1)
}

// SubmitKeyRegistration mocks base method.
func (m *MockExtendedProtocols) SubmitKeyRegistration(arg0 uuid.UUID, arg1 []byte, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitKeyRegistration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitKeyRegistration indicates an expected call of SubmitKeyRegistration.
func (mr *MockExtendedProtocolsMockRecorder) SubmitKeyRegistration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitKeyRegistration", reflect.TypeOf((*MockExtendedProtocols)(nil).SubmitKeyRegistration), arg0, arg1, arg2)
}

// Verify mocks base method.
func (m *MockExtendedProtocols) Verify(arg0, arg1, arg2 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockExtendedProtocolsMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockExtendedProtocols)(nil).Verify), arg0, arg1, arg2)
}
