// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ubirch/ubirch-client-go/main/adapters/repository (interfaces: ContextManager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "github.com/ubirch/ubirch-client-go/main/ent"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// CloseTransaction mocks base method.
func (m *MockContextManager) CloseTransaction(arg0 interface{}, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTransaction indicates an expected call of CloseTransaction.
func (mr *MockContextManagerMockRecorder) CloseTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTransaction", reflect.TypeOf((*MockContextManager)(nil).CloseTransaction), arg0, arg1)
}

// Exists mocks base method.
func (m *MockContextManager) Exists(arg0 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockContextManagerMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockContextManager)(nil).Exists), arg0)
}

// FetchIdentity mocks base method.
func (m *MockContextManager) FetchIdentity(arg0 interface{}, arg1 uuid.UUID) (*ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIdentity", arg0, arg1)
	ret0, _ := ret[0].(*ent.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchIdentity indicates an expected call of FetchIdentity.
func (mr *MockContextManagerMockRecorder) FetchIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIdentity", reflect.TypeOf((*MockContextManager)(nil).FetchIdentity), arg0, arg1)
}

// GetAuthToken mocks base method.
func (m *MockContextManager) GetAuthToken(arg0 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockContextManagerMockRecorder) GetAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockContextManager)(nil).GetAuthToken), arg0)
}

// GetPrivateKey mocks base method.
func (m *MockContextManager) GetPrivateKey(arg0 uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockContextManagerMockRecorder) GetPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockContextManager)(nil).GetPrivateKey), arg0)
}

// GetPublicKey mocks base method.
func (m *MockContextManager) GetPublicKey(arg0 uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockContextManagerMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockContextManager)(nil).GetPublicKey), arg0)
}

// SetSignature mocks base method.
func (m *MockContextManager) SetSignature(arg0 interface{}, arg1 uuid.UUID, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSignature", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSignature indicates an expected call of SetSignature.
func (mr *MockContextManagerMockRecorder) SetSignature(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignature", reflect.TypeOf((*MockContextManager)(nil).SetSignature), arg0, arg1, arg2)
}

// StartTransaction mocks base method.
func (m *MockContextManager) StartTransaction(arg0 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockContextManagerMockRecorder) StartTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockContextManager)(nil).StartTransaction), arg0)
}

// StartTransactionWithLock mocks base method.
func (m *MockContextManager) StartTransactionWithLock(arg0 context.Context, arg1 uuid.UUID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransactionWithLock", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransactionWithLock indicates an expected call of StartTransactionWithLock.
func (mr *MockContextManagerMockRecorder) StartTransactionWithLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransactionWithLock", reflect.TypeOf((*MockContextManager)(nil).StartTransactionWithLock), arg0, arg1)
}

// StoreNewIdentity mocks base method.
func (m *MockContextManager) StoreNewIdentity(arg0 interface{}, arg1 *ent.Identity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewIdentity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewIdentity indicates an expected call of StoreNewIdentity.
func (mr *MockContextManagerMockRecorder) StoreNewIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewIdentity", reflect.TypeOf((*MockContextManager)(nil).StoreNewIdentity), arg0, arg1)
}
