// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: identity.sql

package sqlite

import (
	"context"
)

const getExternalIdentityUUIDs = `-- name: GetExternalIdentityUUIDs :many
SELECT uid
FROM external_identity
`

func (q *Queries) GetExternalIdentityUUIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getExternalIdentityUUIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var uid string
		if err := rows.Scan(&uid); err != nil {
			return nil, err
		}
		items = append(items, uid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityUUIDs = `-- name: GetIdentityUUIDs :many
SELECT uid
FROM identity
`

func (q *Queries) GetIdentityUUIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getIdentityUUIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var uid string
		if err := rows.Scan(&uid); err != nil {
			return nil, err
		}
		items = append(items, uid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadActiveFlag = `-- name: LoadActiveFlag :one
SELECT active
FROM identity
WHERE uid = ?
`

func (q *Queries) LoadActiveFlag(ctx context.Context, uid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, loadActiveFlag, uid)
	var active int64
	err := row.Scan(&active)
	return active, err
}

const loadActiveFlagForUpdate = `-- name: LoadActiveFlagForUpdate :one
SELECT active
FROM identity
WHERE uid = ?
`

func (q *Queries) LoadActiveFlagForUpdate(ctx context.Context, uid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, loadActiveFlagForUpdate, uid)
	var active int64
	err := row.Scan(&active)
	return active, err
}

const loadAuthForUpdate = `-- name: LoadAuthForUpdate :one
SELECT auth_token
FROM identity
WHERE uid = ?
`

func (q *Queries) LoadAuthForUpdate(ctx context.Context, uid string) (string, error) {
	row := q.db.QueryRowContext(ctx, loadAuthForUpdate, uid)
	var auth_token string
	err := row.Scan(&auth_token)
	return auth_token, err
}

const loadExternalIdentity = `-- name: LoadExternalIdentity :one
SELECT uid, public_key
FROM external_identity
WHERE uid = ?
`

func (q *Queries) LoadExternalIdentity(ctx context.Context, uid string) (ExternalIdentity, error) {
	row := q.db.QueryRowContext(ctx, loadExternalIdentity, uid)
	var i ExternalIdentity
	err := row.Scan(&i.Uid, &i.PublicKey)
	return i, err
}

const loadIdentity = `-- name: LoadIdentity :one
SELECT uid, private_key, public_key, signature, auth_token, active
FROM identity
WHERE uid = ?
`

func (q *Queries) LoadIdentity(ctx context.Context, uid string) (Identity, error) {
	row := q.db.QueryRowContext(ctx, loadIdentity, uid)
	var i Identity
	err := row.Scan(
		&i.Uid,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Signature,
		&i.AuthToken,
		&i.Active,
	)
	return i, err
}

const loadSignatureForUpdate = `-- name: LoadSignatureForUpdate :one
SELECT signature
FROM identity
WHERE uid = ?
`

func (q *Queries) LoadSignatureForUpdate(ctx context.Context, uid string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, loadSignatureForUpdate, uid)
	var signature []byte
	err := row.Scan(&signature)
	return signature, err
}

const storeActiveFlag = `-- name: StoreActiveFlag :exec
UPDATE identity
SET active = ?
WHERE uid = ?
`

type StoreActiveFlagParams struct {
	Active int64
	Uid    string
}

func (q *Queries) StoreActiveFlag(ctx context.Context, arg StoreActiveFlagParams) error {
	_, err := q.db.ExecContext(ctx, storeActiveFlag, arg.Active, arg.Uid)
	return err
}

const storeAuth = `-- name: StoreAuth :exec
UPDATE identity
SET auth_token = ?
WHERE uid = ?
`

type StoreAuthParams struct {
	AuthToken string
	Uid       string
}

func (q *Queries) StoreAuth(ctx context.Context, arg StoreAuthParams) error {
	_, err := q.db.ExecContext(ctx, storeAuth, arg.AuthToken, arg.Uid)
	return err
}

const storeExternalIdentity = `-- name: StoreExternalIdentity :exec
INSERT INTO external_identity (uid, public_key)
VALUES (?, ?)
`

type StoreExternalIdentityParams struct {
	Uid       string
	PublicKey []byte
}

func (q *Queries) StoreExternalIdentity(ctx context.Context, arg StoreExternalIdentityParams) error {
	_, err := q.db.ExecContext(ctx, storeExternalIdentity, arg.Uid, arg.PublicKey)
	return err
}

const storeIdentity = `-- name: StoreIdentity :exec
INSERT INTO identity (uid, private_key, public_key, signature, auth_token, active)
VALUES (?, ?, ?, ?, ?, ?)
`

type StoreIdentityParams struct {
	Uid        string
	PrivateKey []byte
	PublicKey  []byte
	Signature  []byte
	AuthToken  string
	Active     int64
}

func (q *Queries) StoreIdentity(ctx context.Context, arg StoreIdentityParams) error {
	_, err := q.db.ExecContext(ctx, storeIdentity,
		arg.Uid,
		arg.PrivateKey,
		arg.PublicKey,
		arg.Signature,
		arg.AuthToken,
		arg.Active,
	)
	return err
}

const storeSignature = `-- name: StoreSignature :exec
UPDATE identity
SET signature = ?
WHERE uid = ?
`

type StoreSignatureParams struct {
	Signature []byte
	Uid       string
}

func (q *Queries) StoreSignature(ctx context.Context, arg StoreSignatureParams) error {
	_, err := q.db.ExecContext(ctx, storeSignature, arg.Signature, arg.Uid)
	return err
}
